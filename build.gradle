plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.7.0'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'nu.studer.jooq' version '7.1.1'
}

group = "dansplugins"
version = "5.0.0-SNAPSHOT"

repositories {
    mavenCentral()
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/public/' }
    maven { url 'https://oss.sonatype.org/content/groups/public/' }
    maven { url 'https://repo.mikeprimm.com/' }
    maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.maven.apache.org/maven2/' }
}

configurations {
    flywayMigration
}

dependencies {
    implementation 'me.clip:placeholderapi:2.11.1'
    implementation 'org.spigotmc:spigot-api:1.19-R0.1-SNAPSHOT'
    implementation 'us.dynmap:dynmap-api:2.2'
    implementation 'org.bstats:bstats-bukkit:3.0.0'
    implementation platform("dev.forkhandles:forkhandles-bom:2.2.0.0")
    implementation 'dev.forkhandles:result4k'
    implementation 'org.jooq:jooq:3.17.2'
    implementation 'org.flywaydb:flyway-core:8.5.13'
    implementation 'org.flywaydb:flyway-mysql:8.5.13'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.5'
    implementation 'com.h2database:h2:2.1.214'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'org.slf4j:slf4j-api:1.8.0-beta4'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'io.mockk:mockk:1.12.4'
    jooqGenerator 'org.jooq:jooq-meta-extensions:3.17.2'
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

jooq {
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                        inputSchema = 'PUBLIC'
                        includes = '.*'
                        excludes = ''
                        properties {
                            property {
                                key = "scripts"
                                value = "src/main/resources/dansplugins/factionsystem/db/migration"
                            }
                            property {
                                key = "sort"
                                value = "semantic"
                            }
                            property {
                                key = "defaultNameCase"
                                value = "lower"
                            }
                        }
                    }
                    target {
                        packageName = 'dansplugins.factionsystem.jooq'
                    }
                }
            }
        }
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    filter ReplaceTokens, tokens: [
            'version': version
    ]
}

shadowJar {
    archiveClassifier.set('')
    mergeServiceFiles()
    dependencies {
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib-jdk8'))
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib'))
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib-common'))
        include(dependency('org.jetbrains:annotations'))
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib-jdk7'))
        include(dependency('org.bstats:bstats-bukkit'))
        include(dependency('org.bstats:bstats-base'))
        include(dependency('dev.forkhandles:result4k'))
        include(dependency('org.jooq:jooq'))
        include(dependency('io.r2dbc:r2dbc-spi'))
        include(dependency('org.reactivestreams:reactive-streams'))
        include(dependency('jakarta.xml.bind:jakarta.xml.bind-api'))
        include(dependency('com.sun.activation:jakarta.activation'))
        include(dependency('org.flywaydb:flyway-core'))
        include(dependency('org.flywaydb:flyway-mysql'))
        include(dependency('org.mariadb.hdbc:mariadb-java-client'))
        include(dependency('com.h2database:h2'))
        include(dependency('com.zaxxer:HikariCP'))
        include(dependency('com.google.code.gson:gson'))
    }

    relocate 'com.google', 'dansplugins.factionsystem.shadow.com.google'
    relocate 'com.mysql', 'dansplugins.factionsystem.shadow.com.mysql'
    relocate 'com.sun', 'dansplugins.factionsystem.shadow.com.sun'
    relocate 'com.zaxxer', 'dansplugins.factionsystem.shadow.com.zaxxer'
    relocate 'dev.forkhandles', 'dansplugins.factionsystem.shadow.dev.forkhandles'
    relocate 'google', 'dansplugins.factionsystem.shadow.google'
    relocate 'io.r2dbc', 'dansplugins.factionsystem.shadow.io.r2dbc'
    relocate 'jakarta', 'dansplugins.factionsystem.shadow.jakarta'
    relocate 'kotlin', 'dansplugins.factionsystem.shadow.kotlin'
    relocate 'org.bstats', 'dansplugins.factionsystem.shadow.org.bstats'
    relocate 'org.flywaydb', 'dansplugins.factionsystem.shadow.org.flywaydb'
    relocate 'org.h2', 'dansplugins.factionsystem.shadow.org.h2'
    relocate 'org.intellij', 'dansplugins.factionsystem.shadow.org.intellij'
    relocate 'org.jetbrains', 'dansplugins.factionsystem.shadow.org.jetbrains'
    relocate 'org.jooq', 'dansplugins.factionsystem.shadow.org.jooq'
    relocate 'org.reactivestreams', 'dansplugins.factionsystem.shadow.org.reactivestreams'
}

artifacts {
    archives shadowJar
}

tasks.named('test') {
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) { publication ->
            from(project.shadow.component(publication))
        }
    }
}